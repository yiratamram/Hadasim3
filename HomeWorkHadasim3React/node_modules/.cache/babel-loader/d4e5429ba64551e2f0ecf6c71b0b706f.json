{"ast":null,"code":"import axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport { GetCompanyByNameAndPassword, AddCompany, GetAllCompanies, UpdateCompany, RemoveCompany } from \"./CompaniesAction\";\nexport const CompaniesURL = \"http://localhost:21507/api/Companies/\";\nimport { GetCompanyByCode } from \"./CompaniesAction\";\nexport const getAllCopmanies = async dispatch => {\n  const companyPromise = axios.get(CompaniesURL + \"GetAllCompanies\");\n  const response = await companyPromise;\n  const companies = response.data;\n  dispatch(GetAllCompanies(companies));\n  return companies;\n};\nexport const getCompanyByNameAndPassword = async (dispatch, email, name, password) => {\n  const companyPromise = axios.get(CompaniesURL + \"GetCompanyByNameAndPassword/\" + email + \"%2C%D7%90%D7%95%D7%A9%D7%A8%20%D7%A2%D7%93%2C\" + password + \"?PrivateEmail=\" + email + \"&UserName=\" + name + \"&UserPassword=\" + password);\n  const response = await companyPromise;\n  const company = response.data;\n  dispatch(GetCompanyByNameAndPassword(company));\n  return company;\n};\nexport const getCompanyByCode = async (dispatch, code) => {\n  const companyPromise = axios.get(CompaniesURL + \"GetCompanyByCode/\" + code);\n  const response = await companyPromise;\n  const company = response.data;\n  console.log(company);\n  dispatch(GetCompanyByCode(company));\n  return company;\n};\nexport const addCompany = async (dispatch, nameCompany, privateEmail, customerServiceEmail, customerServiceEmailPassword, userName, userPassword) => {\n  try {\n    const newCompany = {\n      nameCompany: nameCompany,\n      privateEmail: privateEmail,\n      customerServiceEmail: customerServiceEmail,\n      customerServiceEmailPassword: customerServiceEmailPassword,\n      userName: userName,\n      userPassword: userPassword\n    };\n    const companyPromise = await axios.post(CompaniesURL + \"AddCompany\", newCompany);\n    console.log(companyPromise);\n    await dispatch(AddCompany(companyPromise.data));\n    return companyPromise.data;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const removeCompany = async (dispatch, CodeCustomer) => {\n  try {\n    const companyPromise = await axios.delete(CompaniesURL + \"RemoveCompany?Id=\" + CodeCustomer);\n    await dispatch(RemoveCompany(companyPromise));\n    const response = await companyPromise.data;\n    return companyPromise.data;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const updateCompany = async (dispatch, codeCompany, nameCompany, privateEmail, customerServiceEmail, customerServiceEmailPassword, userName, userPassword) => {\n  const updateCompany = {\n    codeCompany: codeCompany,\n    nameCompany: nameCompany,\n    privateEmail: privateEmail,\n    customerServiceEmail: customerServiceEmail,\n    customerServiceEmailPassword: customerServiceEmailPassword,\n    userName: userName,\n    userPassword: userPassword\n  };\n\n  try {\n    const companyPromise = await axios.put(CompaniesURL + \"UpdateCompany/\", updateCompany);\n    await dispatch(UpdateCompany(companyPromise.data));\n    const response = await companyPromise;\n    return companyPromise.data;\n  } catch (e) {\n    console.log(e);\n  }\n};","map":{"version":3,"sources":["D:/יראת עמרם/שולחן העבודה/פרוייקט חיצוני/ProfileCustomerReact/src/Redux/Companies/CompaniesThunk.jsx"],"names":["axios","useDispatch","GetCompanyByNameAndPassword","AddCompany","GetAllCompanies","UpdateCompany","RemoveCompany","CompaniesURL","GetCompanyByCode","getAllCopmanies","dispatch","companyPromise","get","response","companies","data","getCompanyByNameAndPassword","email","name","password","company","getCompanyByCode","code","console","log","addCompany","nameCompany","privateEmail","customerServiceEmail","customerServiceEmailPassword","userName","userPassword","newCompany","post","e","removeCompany","CodeCustomer","delete","updateCompany","codeCompany","put"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport { GetCompanyByNameAndPassword,AddCompany,GetAllCompanies,UpdateCompany,RemoveCompany } from \"./CompaniesAction\";\r\nexport const CompaniesURL=\"http://localhost:21507/api/Companies/\"\r\nimport { GetCompanyByCode } from \"./CompaniesAction\";\r\n \r\nexport const getAllCopmanies=async(dispatch)=>\r\n{\r\n    const companyPromise=axios.get(CompaniesURL+\"GetAllCompanies\");\r\n     const response=await companyPromise;\r\n     const companies=response.data;\r\n     dispatch(GetAllCompanies(companies))\r\n     return companies;\r\n }\r\n \r\n \r\nexport const getCompanyByNameAndPassword = async (dispatch,email,name,password) => {\r\n    const companyPromise = axios.get(CompaniesURL+\"GetCompanyByNameAndPassword/\"+email+\"%2C%D7%90%D7%95%D7%A9%D7%A8%20%D7%A2%D7%93%2C\"+password+\"?PrivateEmail=\"+email+\"&UserName=\"+name+\"&UserPassword=\"+password);\r\n    const response = await companyPromise;\r\n    const company = response.data;\r\n    dispatch(GetCompanyByNameAndPassword(company))\r\n    return company;\r\n\r\n}\r\nexport const getCompanyByCode = async (dispatch,code) => {\r\n    \r\n    const companyPromise = axios.get(CompaniesURL+\"GetCompanyByCode/\"+code);\r\n    const response = await companyPromise;\r\n    const company = response.data;\r\n    console.log(company);\r\n    dispatch(GetCompanyByCode(company))\r\n    return company;\r\n\r\n}\r\nexport const addCompany=async(dispatch,nameCompany,privateEmail,customerServiceEmail,customerServiceEmailPassword,userName,userPassword)=>\r\n  {   \r\n       try{\r\n           \r\n       const newCompany={ nameCompany:nameCompany,privateEmail: privateEmail,customerServiceEmail:customerServiceEmail,customerServiceEmailPassword:customerServiceEmailPassword,userName:userName,userPassword:userPassword};\r\n       const companyPromise =await axios.post(CompaniesURL+\"AddCompany\",newCompany);\r\n       console.log(companyPromise);\r\n       await  dispatch(AddCompany(companyPromise.data));\r\n       return companyPromise.data;\r\n       }\r\n       catch(e){\r\n           console.log(e);\r\n       }\r\n       \r\n    }\r\n\r\n    export const removeCompany = async (dispatch, CodeCustomer) => {\r\n        try {\r\n            const companyPromise = await axios.delete(CompaniesURL + \"RemoveCompany?Id=\" + CodeCustomer);\r\n            await dispatch(RemoveCompany(companyPromise));\r\n            const response = await companyPromise.data;\r\n            return companyPromise.data;\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    export const updateCompany = async (dispatch,codeCompany,nameCompany,privateEmail,customerServiceEmail,customerServiceEmailPassword,userName,userPassword) => {\r\n        const updateCompany  = {codeCompany:codeCompany,nameCompany:nameCompany,privateEmail:privateEmail,customerServiceEmail:customerServiceEmail,customerServiceEmailPassword:customerServiceEmailPassword,userName:userName,userPassword:userPassword };\r\n        try {\r\n            const companyPromise = await axios.put(CompaniesURL + \"UpdateCompany/\", updateCompany);\r\n            await dispatch(UpdateCompany(companyPromise.data));\r\n            const response = await companyPromise;\r\n            return companyPromise.data;\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}